---
import Layout from '../layouts/Layout.astro';
import { client, queries, urlFor } from '../lib/sanity';

export interface Props {
  slug: string;
}

// Required function for dynamic routes in Astro
export async function getStaticPaths() {
  // Return empty array to disable dynamic routing
  // This prevents the slug route from catching all 404s
  return [];
}

const { slug } = Astro.props;

// Check if we're in preview mode
const isPreview = Astro.url.searchParams.get('preview') === 'true' || Astro.url.searchParams.get('previewMode') === 'true';

// Configure client for preview mode
const previewClient = client.withConfig({
  useCdn: !isPreview,
  token: isPreview ? process.env.SANITY_API_READ_TOKEN : undefined,
  perspective: isPreview ? 'previewDrafts' : 'published'
});

// Fetch page data from Sanity (with preview support)
let page;
try {
  page = await previewClient.fetch(queries.page, { slug });
} catch (error) {
  console.error(`Error fetching page with slug "${slug}":`, error);
  page = null;
}

if (!page) {
  // Try to find the page in different document types
  try {
    // Check if it's a homepage
    if (slug === 'home' || slug === '') {
      page = await previewClient.fetch(queries.homepage);
      if (page) {
        page.pageType = 'homepage';
      }
    }
    
    // If still not found, return 404
    if (!page) {
      return Astro.redirect('/404');
    }
  } catch (error) {
    console.error('Error in fallback page fetch:', error);
    return Astro.redirect('/404');
  }
}

// Fetch content data for postGridSection components
const contentData = {
  rooms: await previewClient.fetch(queries.featuredRooms),
  dining: await previewClient.fetch(queries.featuredDining),
  amenities: await previewClient.fetch(queries.featuredAmenities)
};

// Helper function to get image URL safely
function getImageUrl(image: any, width: number, height: number): string {
  if (!image?.asset?._ref) {
    return '/hero-image.jpg'; // fallback image
  }
  return urlFor(image).width(width).height(height).url();
}

// Helper function to render rich text content
function renderRichText(content: any[]): string {
  if (!content || !Array.isArray(content)) return '';
  
  return content.map(block => {
    if (block._type === 'block') {
      const text = block.children?.map(child => child.text || '').join('') || '';
      
      switch (block.style) {
        case 'h3':
          return `<h3>${text}</h3>`;
        case 'blockquote':
          return `<blockquote>${text}</blockquote>`;
        default:
          return `<p>${text}</p>`;
      }
    }
    return '';
  }).join('');
}

// Determine heading level based on page type
const introHeadingLevel = page.pageType === 'homepage' ? 'h1' : 'h2';
const sectionHeadingLevel = page.pageType === 'homepage' ? 'h2' : 'h3';

// Build SEO props
const seoProps = {
  title: page.title,
  description: page.metaDescription,
  keywords: page.seoSettings?.keywords || [],
  noindex: page.seoSettings?.noindex || false
};
---

<Layout {...seoProps}>
  <!-- Preview Mode Indicator -->
  
  <main id="main" style={isPreview ? "margin-top: 40px;" : ""}>
    <!-- Page Introduction -->
    <section class="page-intro" data-sanity-edit-section={`${page._id}#intro`}>
      <div class="wrapper">
        <div class="intro-content">
          {page.intro.subtitle && (
            <span class="intro-subtitle" data-sanity-edit-field={`${page._id}#intro.subtitle`}>
              {page.intro.subtitle}
            </span>
          )}
          <h1 class="intro-title" data-sanity-edit-field={`${page._id}#intro.title`}>
            {page.intro.title}
          </h1>
          {page.intro.description && (
            <p class="intro-description" data-sanity-edit-field={`${page._id}#intro.description`}>
              {page.intro.description}
            </p>
          )}
        </div>
        {page.intro.heroImage && (
          <div class="intro-image" data-sanity-edit-field={`${page._id}#intro.heroImage`}>
            <img 
              src={getImageUrl(page.intro.heroImage, 800, 600)} 
              alt={page.intro.title}
              loading="eager"
            />
          </div>
        )}
      </div>
    </section>

    <!-- Page Sections -->
    {page.sections && page.sections.map((section: any, index: number) => {
      switch (section._type) {
        case 'textSection':
          return (
            <section class="text-section" data-sanity-edit-section={`${page._id}#sections[${index}]`}>
              <div class="wrapper">
                <div class={`text-content ${section.layout || 'full'}`}>
                  {section.heading && (
                    <h2 class="section-heading" data-sanity-edit-field={`${page._id}#sections[${index}].heading`}>
                      {section.heading}
                    </h2>
                  )}
                  <div class="text-body" data-sanity-edit-field={`${page._id}#sections[${index}].content`} set:html={renderRichText(section.content)}></div>
                </div>
              </div>
            </section>
          );
        
        case 'imageTextSection':
          return (
            <section class="image-text-section">
              <div class="wrapper">
                <div class={`image-text-content ${section.layout || 'image-left'}`}>
                  {section.heading && (
                    <h2 class="section-heading">{section.heading}</h2>
                  )}
                  <div class="image-text-body">
                    {section.image && (
                      <div class="image-text-image">
                        <img 
                          src={getImageUrl(section.image, 600, 400)} 
                          alt={section.heading || 'Section image'}
                        />
                      </div>
                    )}
                    <div class="image-text-text">
                      <div set:html={renderRichText(section.content)}></div>
                    </div>
                  </div>
                </div>
              </div>
            </section>
          );
        
        case 'gallerySection':
          return (
            <section class="gallery-section">
              <div class="wrapper">
                {section.heading && (
                  <h2 class="section-heading">{section.heading}</h2>
                )}
                <div class={`gallery-grid ${section.layout || 'grid'}`}>
                  {section.images && section.images.map((image: any) => (
                    <div class="gallery-item">
                      <img 
                        src={getImageUrl(image, 400, 300)} 
                        alt={image.alt || 'Gallery image'}
                        loading="lazy"
                      />
                      {image.caption && (
                        <p class="gallery-caption">{image.caption}</p>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            </section>
          );
        
        case 'postGridSection':
          const posts = contentData[section.postType] || [];
          const displayPosts = section.featuredOnly 
            ? posts.filter(post => post.featured) 
            : posts;
          const limitedPosts = displayPosts.slice(0, section.limit || 6);
          
          return (
            <section class="post-grid-section">
              <div class="wrapper">
                {section.heading && (
                  <h2 class="section-heading">{section.heading}</h2>
                )}
                <div class="post-grid">
                  {limitedPosts.length > 0 ? (
                    limitedPosts.map((post: any) => (
                      <div class="post-card">
                        <div class="post-image">
                          <img 
                            src={getImageUrl(post.image, 400, 300)} 
                            alt={post.title}
                            loading="lazy"
                          />
                        </div>
                        <div class="post-content">
                          <h3 class="post-title">{post.title}</h3>
                          {post.description && (
                            <p class="post-description">{post.description}</p>
                          )}
                          <a href={`/${section.postType}/${post.slug?.current || post._id}`} class="btn btn-secondary">
                            Learn More
                          </a>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div class="post-grid-empty">
                      <p>No {section.postType} found.</p>
                    </div>
                  )}
                </div>
              </div>
            </section>
          );
        
        case 'mapSection':
          return (
            <section class="map-section">
              <div class="wrapper">
                {section.heading && (
                  <h2 class="section-heading">{section.heading}</h2>
                )}
                <div class="map-container">
                  <div 
                    id={`map-${index}`}
                    class="map"
                    data-lat={section.latitude}
                    data-lng={section.longitude}
                    data-zoom={section.zoom}
                    data-marker-text={section.markerText}
                  ></div>
                </div>
              </div>
            </section>
          );
        
        case 'formSection':
          return (
            <section class="form-section">
              <div class="wrapper">
                {section.heading && (
                  <h2 class="section-heading">{section.heading}</h2>
                )}
                {section.description && (
                  <p class="form-description">{section.description}</p>
                )}
                <div class="form-container">
                  <form class={`form form-${section.formType}`}>
                    {section.formType === 'contact' && (
                      <>
                        <div class="form-group">
                          <label for="name">Name</label>
                          <input type="text" id="name" name="name" required />
                        </div>
                        <div class="form-group">
                          <label for="email">Email</label>
                          <input type="email" id="email" name="email" required />
                        </div>
                        <div class="form-group">
                          <label for="subject">Subject</label>
                          <input type="text" id="subject" name="subject" required />
                        </div>
                        <div class="form-group">
                          <label for="message">Message</label>
                          <textarea id="message" name="message" rows="5" required></textarea>
                        </div>
                      </>
                    )}
                    <button type="submit" class="btn btn-primary">Send Message</button>
                  </form>
                </div>
              </div>
            </section>
          );
        
        case 'testimonialsSection':
          return (
            <section class="testimonials-section">
              <div class="wrapper">
                {section.heading && (
                  <h2 class="section-heading">{section.heading}</h2>
                )}
                <div class={`testimonials-grid ${section.layout || 'grid'}`}>
                  {section.testimonials && section.testimonials.map((testimonial: any) => (
                    <div class="testimonial">
                      <div class="testimonial-rating">
                        {'★'.repeat(testimonial.rating)}
                      </div>
                      <blockquote class="testimonial-quote">
                        "{testimonial.quote}"
                      </blockquote>
                      <div class="testimonial-author">
                        <strong>{testimonial.author}</strong>
                        {testimonial.authorTitle && (
                          <span class="testimonial-title">{testimonial.authorTitle}</span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </section>
          );
        
        default:
          return null;
      }
    })}

    <!-- Call to Action -->
    {page.cta && page.cta.enabled && (
      <section class="cta-section">
        <div class="wrapper">
          <div class="cta-content">
            <h2 class="cta-title">{page.cta.title}</h2>
            {page.cta.description && (
              <p class="cta-description">{page.cta.description}</p>
            )}
            <div class="cta-actions">
              {page.cta.primaryButton && (
                <a href={page.cta.primaryButton.url} class="btn btn-primary">
                  {page.cta.primaryButton.text}
                </a>
              )}
              {page.cta.secondaryButton && (
                <a href={page.cta.secondaryButton.url} class="btn btn-secondary">
                  {page.cta.secondaryButton.text}
                </a>
              )}
            </div>
          </div>
        </div>
      </section>
    )}
  </main>
</Layout>

<style>
  .page-intro {
    padding: 4rem 0;
    background: var(--color-surface);
  }
  
  .intro-content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .intro-subtitle {
    display: block;
    font-size: 1.125rem;
    color: var(--color-text-secondary);
    margin-bottom: 0.5rem;
  }
  
  .intro-title {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: var(--color-text-primary);
  }
  
  .intro-description {
    font-size: 1.25rem;
    line-height: 1.6;
    color: var(--color-text-secondary);
  }
  
  .intro-image {
    margin-top: 2rem;
    border-radius: 0.5rem;
    overflow: hidden;
  }
  
  .intro-image img {
    width: 100%;
    height: auto;
    display: block;
  }
  
  .text-section,
  .image-text-section,
  .gallery-section,
  .post-grid-section,
  .map-section,
  .form-section,
  .testimonials-section {
    padding: 3rem 0;
  }
  
  .section-heading {
    font-size: 2.5rem;
    font-weight: 600;
    margin-bottom: 2rem;
    text-align: center;
    color: var(--color-text-primary);
  }
  
  .text-content.full {
    max-width: 800px;
    margin: 0 auto;
  }
  
  .text-content.centered {
    text-align: center;
    max-width: 600px;
    margin: 0 auto;
  }
  
  .text-content.two-column {
    columns: 2;
    column-gap: 2rem;
  }
  
  .text-body h3 {
    font-size: 1.5rem;
    margin: 1.5rem 0 1rem;
    color: var(--color-text-primary);
  }
  
  .text-body blockquote {
    border-left: 4px solid var(--color-primary);
    padding-left: 1rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: var(--color-text-secondary);
  }
  
  .image-text-content {
    display: grid;
    gap: 2rem;
    align-items: center;
  }
  
  .image-text-content.image-left {
    grid-template-columns: 1fr 1fr;
  }
  
  .image-text-content.image-right {
    grid-template-columns: 1fr 1fr;
  }
  
  .image-text-content.image-right .image-text-image {
    order: 2;
  }
  
  .image-text-content.image-top {
    grid-template-columns: 1fr;
  }
  
  .image-text-image img {
    width: 100%;
    height: auto;
    border-radius: 0.5rem;
  }
  
  .gallery-grid {
    display: grid;
    gap: 1rem;
  }
  
  .gallery-grid.grid {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }
  
  .gallery-item img {
    width: 100%;
    height: 250px;
    object-fit: cover;
    border-radius: 0.5rem;
  }
  
  .gallery-caption {
    margin-top: 0.5rem;
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    text-align: center;
  }
  
  .map-container {
    height: 400px;
    border-radius: 0.5rem;
    overflow: hidden;
  }
  
  .map {
    width: 100%;
    height: 100%;
  }
  
  .form-container {
    max-width: 600px;
    margin: 0 auto;
  }
  
  .form-group {
    margin-bottom: 1.5rem;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--color-text-primary);
  }
  
  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--color-border);
    border-radius: 0.375rem;
    font-size: 1rem;
    background: var(--color-surface);
    color: var(--color-text-primary);
  }
  
  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px var(--color-primary-alpha);
  }
  
  .testimonials-grid {
    display: grid;
    gap: 2rem;
  }
  
  .testimonials-grid.grid {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }
  
  .post-grid {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }
  
  .post-card {
    background: var(--color-surface);
    border-radius: 0.5rem;
    overflow: hidden;
    transition: transform 0.2s ease;
  }
  
  .post-card:hover {
    transform: translateY(-2px);
  }
  
  .post-image img {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }
  
  .post-content {
    padding: 1.5rem;
  }
  
  .post-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--color-text-primary);
  }
  
  .post-description {
    color: var(--color-text-secondary);
    margin-bottom: 1rem;
    line-height: 1.5;
  }
  
  .post-grid-empty {
    text-align: center;
    padding: 2rem;
    color: var(--color-text-secondary);
  }
  
  .testimonial {
    padding: 2rem;
    background: var(--color-surface);
    border-radius: 0.5rem;
    text-align: center;
  }
  
  .testimonial-rating {
    color: #fbbf24;
    font-size: 1.25rem;
    margin-bottom: 1rem;
  }
  
  .testimonial-quote {
    font-size: 1.125rem;
    line-height: 1.6;
    margin-bottom: 1.5rem;
    color: var(--color-text-primary);
  }
  
  .testimonial-author strong {
    display: block;
    margin-bottom: 0.25rem;
    color: var(--color-text-primary);
  }
  
  .testimonial-title {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
  }
  
  .cta-section {
    padding: 4rem 0;
    background: var(--color-primary);
    color: white;
  }
  
  .cta-content {
    text-align: center;
    max-width: 600px;
    margin: 0 auto;
  }
  
  .cta-title {
    font-size: 2.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }
  
  .cta-description {
    font-size: 1.25rem;
    margin-bottom: 2rem;
    opacity: 0.9;
  }
  
  .cta-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }
  
  .cta-actions .btn {
    padding: 1rem 2rem;
    font-size: 1.125rem;
  }
  
  .cta-actions .btn-primary {
    background: white;
    color: var(--color-primary);
  }
  
  .cta-actions .btn-secondary {
    background: transparent;
    color: white;
    border: 2px solid white;
  }
  
  @media (max-width: 768px) {
    .intro-title {
      font-size: 2rem;
    }
    
    .section-heading {
      font-size: 2rem;
    }
    
    .image-text-content.image-left,
    .image-text-content.image-right {
      grid-template-columns: 1fr;
    }
    
    .text-content.two-column {
      columns: 1;
    }
    
    .cta-title {
      font-size: 2rem;
    }
    
    .cta-actions {
      flex-direction: column;
      align-items: center;
    }
  }
</style>

<script>
  // Initialize maps for map sections
  document.addEventListener('DOMContentLoaded', function() {
    const mapElements = document.querySelectorAll('.map');
    
    mapElements.forEach(mapElement => {
      const lat = parseFloat(mapElement.dataset.lat);
      const lng = parseFloat(mapElement.dataset.lng);
      const zoom = parseInt(mapElement.dataset.zoom);
      const markerText = mapElement.dataset.markerText;
      
      if (lat && lng) {
        // Initialize Leaflet map
        const map = L.map(mapElement).setView([lat, lng], zoom);
        
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '© OpenStreetMap contributors'
        }).addTo(map);
        
        if (markerText) {
          L.marker([lat, lng]).addTo(map)
            .bindPopup(markerText);
        }
      }
    });
  });

</script>
