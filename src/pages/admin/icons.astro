---
layout: ../layouts/Layout.astro
title: Icon Manager - Admin Dashboard
description: Manage custom icons and icon usage statistics
---

<div class="admin-page">
  <div class="admin-header">
    <h1>Icon Manager</h1>
    <p>Upload, manage, and track usage of custom icons in your preview mode system.</p>
  </div>

  <div class="admin-content">
    <!-- Icon Manager Component will be mounted here -->
    <div id="icon-manager-root"></div>
  </div>
</div>

<!-- React and Icon Manager Scripts -->
<script>
  // Check authentication (simple password check for demo)
  const checkAuth = () => {
    const password = prompt('Enter admin password:');
    if (password !== 'admin2024') {
      alert('Access denied');
      window.location.href = '/';
      return false;
    }
    return true;
  };

  // Initialize the icon manager
  const initIconManager = async () => {
    if (!checkAuth()) return;

    try {
      // Import React and the IconManager component
      const React = await import('https://esm.sh/react@18');
      const ReactDOM = await import('https://esm.sh/react-dom@18/client');
      
      // Import our IconManager component
      const { IconManager } = await import('/src/components/IconManager.tsx');
      
      // Mount the component
      const root = ReactDOM.createRoot(document.getElementById('icon-manager-root'));
      root.render(React.createElement(IconManager));
      
    } catch (error) {
      console.error('Error initializing icon manager:', error);
      document.getElementById('icon-manager-root').innerHTML = `
        <div class="error-message">
          <h3>Error Loading Icon Manager</h3>
          <p>Failed to load the icon management interface. Please check the console for details.</p>
          <button onclick="location.reload()">Retry</button>
        </div>
      `;
    }
  };

  // Initialize when page loads
  document.addEventListener('DOMContentLoaded', initIconManager);
</script>

<style>
  .admin-page {
    min-height: 100vh;
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    padding: 24px;
  }

  .admin-header {
    text-align: center;
    margin-bottom: 32px;
    padding: 32px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .admin-header h1 {
    margin: 0 0 8px;
    font-size: 32px;
    color: #1f2937;
    font-weight: 700;
  }

  .admin-header p {
    margin: 0;
    font-size: 16px;
    color: #6b7280;
  }

  .admin-content {
    max-width: 1200px;
    margin: 0 auto;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .error-message {
    padding: 40px;
    text-align: center;
    color: #dc2626;
  }

  .error-message h3 {
    margin: 0 0 16px;
    font-size: 20px;
  }

  .error-message p {
    margin: 0 0 24px;
    color: #6b7280;
  }

  .error-message button {
    padding: 12px 24px;
    background: #374151;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
  }

  .error-message button:hover {
    background: #4b5563;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .admin-page {
      padding: 16px;
    }

    .admin-header {
      padding: 24px 16px;
    }

    .admin-header h1 {
      font-size: 24px;
    }
  }

  /* Loading State */
  #icon-manager-root:empty::before {
    content: 'Loading Icon Manager...';
    display: block;
    padding: 40px;
    text-align: center;
    color: #6b7280;
    font-size: 16px;
  }
</style>

<!-- Additional Security Headers -->
<script>
  // Prevent right-click context menu in admin area
  document.addEventListener('contextmenu', (e) => {
    if (e.target.closest('.admin-page')) {
      e.preventDefault();
    }
  });

  // Prevent text selection in admin area
  document.addEventListener('selectstart', (e) => {
    if (e.target.closest('.admin-page')) {
      e.preventDefault();
    }
  });

  // Auto-logout after 30 minutes of inactivity
  let inactivityTimer;
  const resetInactivityTimer = () => {
    clearTimeout(inactivityTimer);
    inactivityTimer = setTimeout(() => {
      if (confirm('Session expired. Please log in again.')) {
        window.location.href = '/';
      }
    }, 30 * 60 * 1000); // 30 minutes
  };

  // Reset timer on user activity
  ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'].forEach(event => {
    document.addEventListener(event, resetInactivityTimer, true);
  });

  // Start the timer
  resetInactivityTimer();
</script>
