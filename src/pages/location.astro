---
import Layout from '../layouts/Layout.astro';
import { client, queries, urlFor } from '../lib/sanity';

// Fetch location page content from Sanity
const locationPage = await client.fetch(queries.locationPage);

// Extract content with fallbacks
const pageTitle = locationPage?.pageTitle || 'Location - Paradise Hotel';
const heroTitle = locationPage?.heroTitle || 'Our Location';
const heroSubtitle = locationPage?.heroSubtitle || 'Find us in paradise';
const heroImage = locationPage?.heroImage;
const address = locationPage?.address || {};
const mapSettings = locationPage?.mapSettings || {};
const directions = locationPage?.directions || {};
const localAttractions = locationPage?.localAttractions || [];
const parkingInfo = locationPage?.parkingInfo || {};
const accessibility = locationPage?.accessibility || {};

// Helper function to get image URL safely
function getImageUrl(image: any, width: number, height: number): string {
  if (!image?.asset?._ref) {
    return '/hero-image.jpg'; // fallback image
  }
  return urlFor(image).width(width).height(height).url();
}

// Unsplash image helper function
function getUnsplashImage(query: string, width: number = 800, height: number = 600): string {
  // Use Picsum Photos for reliable placeholder images
  const seed = query.replace(/\s+/g, '').toLowerCase();
  return `https://picsum.photos/seed/${seed}/${width}/${height}`;
}

// Helper function to get attraction icon
function getAttractionIcon(category: string): string {
  const icons: { [key: string]: string } = {
    restaurant: 'üçΩÔ∏è',
    shopping: 'üõçÔ∏è',
    entertainment: 'üé≠',
    nature: 'üåø',
    culture: 'üèõÔ∏è',
    sports: '‚öΩ'
  };
  return icons[category] || 'üìç';
}
---

<Layout title={pageTitle}>
	<main>
		<!-- Banner Section -->
		<section class="page-banner">
			<img src={heroImage ? getImageUrl(heroImage, 1920, 1080) : getUnsplashImage('luxury hotel exterior', 1920, 1080)} alt="Hotel location" />
			<div class="overlay"></div>
			<div class="heading">
				<div class="inner">
					<span class="subtitle">{heroSubtitle}</span>
					<h1 class="title3">{heroTitle}</h1>
				</div>
			</div>
		</section>

		<!-- Main Content -->
		<section id="main">
			<div class="wrapper">
				<!-- Address Section -->
				<div class="address-section">
					<h2>Address</h2>
					<div class="address-card">
						{address.fullAddress ? (
							<p class="full-address">{address.fullAddress}</p>
						) : (
							<div class="address-details">
								{address.street && <p>{address.street}</p>}
								{address.city && address.state && (
									<p>{address.city}, {address.state} {address.zipCode}</p>
								)}
								{address.country && <p>{address.country}</p>}
							</div>
						)}
					</div>
				</div>

				<!-- Map Section -->
				<div class="map-section">
					<h2>{mapSettings.mapTitle || 'Find Us on the Map'}</h2>
					<div class="map-container">
						{mapSettings.latitude && mapSettings.longitude ? (
							<div 
								id="location-map" 
								class="leaflet-map"
								data-lat={mapSettings.latitude}
								data-lng={mapSettings.longitude}
								data-zoom={mapSettings.zoom || 15}
								data-marker-zoom={mapSettings.markerZoom || 18}
							></div>
						) : (
							<div class="map-placeholder">
								<p>Map coordinates not configured. Please add latitude and longitude in the CMS.</p>
							</div>
						)}
					</div>
				</div>

				<!-- Directions Section -->
				<div class="directions-section">
					<h2>How to Get Here</h2>
					<div class="directions-grid">
						{directions.fromAirport && (
							<div class="direction-card">
								<h3>‚úàÔ∏è From Airport</h3>
								<p>{directions.fromAirport}</p>
							</div>
						)}

						{directions.fromHighway && (
							<div class="direction-card">
								<h3>üõ£Ô∏è From Highway</h3>
								<p>{directions.fromHighway}</p>
							</div>
						)}

						{directions.fromCityCenter && (
							<div class="direction-card">
								<h3>üèôÔ∏è From City Center</h3>
								<p>{directions.fromCityCenter}</p>
							</div>
						)}

						{directions.publicTransport && (
							<div class="direction-card">
								<h3>üöå Public Transportation</h3>
								<p>{directions.publicTransport}</p>
							</div>
						)}
					</div>
				</div>

				<!-- Local Attractions -->
				{localAttractions.length > 0 && (
					<div class="attractions-section">
						<h2>Local Attractions</h2>
						<div class="attractions-grid">
							{localAttractions.map((attraction: any) => (
								<div class="attraction-card">
									<div class="attraction-header">
										<span class="attraction-icon">{getAttractionIcon(attraction.category)}</span>
										<h3>{attraction.name}</h3>
									</div>
									{attraction.description && (
										<p class="attraction-description">{attraction.description}</p>
									)}
									{attraction.distance && (
										<p class="attraction-distance">üìç {attraction.distance}</p>
									)}
									{attraction.image && (
										<div class="attraction-image">
											<img src={getImageUrl(attraction.image, 300, 200)} alt={attraction.name} />
										</div>
									)}
								</div>
							))}
						</div>
					</div>
				)}

				<!-- Parking Information -->
				{(parkingInfo.onSiteParking || parkingInfo.parkingDetails || parkingInfo.valetService || parkingInfo.nearbyParking) && (
					<div class="parking-section">
						<h2>Parking Information</h2>
						<div class="parking-info">
							{parkingInfo.onSiteParking && (
								<div class="parking-item">
									<h3>‚úÖ On-Site Parking</h3>
									{parkingInfo.parkingDetails && <p>{parkingInfo.parkingDetails}</p>}
								</div>
							)}

							{parkingInfo.valetService && (
								<div class="parking-item">
									<h3>üöó Valet Service</h3>
									<p>Valet parking service available</p>
								</div>
							)}

							{parkingInfo.nearbyParking && (
								<div class="parking-item">
									<h3>üÖøÔ∏è Nearby Parking</h3>
									<p>{parkingInfo.nearbyParking}</p>
								</div>
							)}
						</div>
					</div>
				)}

				<!-- Accessibility Information -->
				{(accessibility.wheelchairAccessible || accessibility.accessibilityDetails || accessibility.specialNeedsContact) && (
					<div class="accessibility-section">
						<h2>Accessibility</h2>
						<div class="accessibility-info">
							{accessibility.wheelchairAccessible && (
								<div class="accessibility-item">
									<h3>‚ôø Wheelchair Accessible</h3>
									<p>Our facility is wheelchair accessible</p>
								</div>
							)}

							{accessibility.accessibilityDetails && (
								<div class="accessibility-item">
									<h3>Accessibility Features</h3>
									<p>{accessibility.accessibilityDetails}</p>
								</div>
							)}

							{accessibility.specialNeedsContact && (
								<div class="accessibility-item">
									<h3>Special Needs Contact</h3>
									<p>{accessibility.specialNeedsContact}</p>
								</div>
							)}
						</div>
					</div>
				)}
			</div>
		</section>
	</main>
</Layout>

<style>
	.address-section,
	.map-section,
	.directions-section,
	.attractions-section,
	.parking-section,
	.accessibility-section {
		margin-bottom: 3rem;
	}

	.address-section h2,
	.map-section h2,
	.directions-section h2,
	.attractions-section h2,
	.parking-section h2,
	.accessibility-section h2 {
		margin-bottom: 1.5rem;
		color: var(--color-primary);
	}

	.address-card {
		background: var(--color-light);
		padding: 2rem;
		border-radius: 8px;
		border-left: 4px solid var(--color-primary);
	}

	.full-address {
		font-size: 1.1rem;
		line-height: 1.6;
		margin: 0;
	}

	.address-details p {
		margin: 0.5rem 0;
		font-size: 1.1rem;
	}

	.map-container {
		border-radius: 8px;
		overflow: hidden;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
	}

	.map-placeholder {
		height: 400px;
		background: #f8f9fa;
		display: flex;
		align-items: center;
		justify-content: center;
		color: var(--color-text-light);
	}

	.leaflet-map {
		height: 400px;
		width: 100%;
		border-radius: 8px;
	}

	.directions-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: 1.5rem;
	}

	.direction-card {
		background: var(--color-light);
		padding: 1.5rem;
		border-radius: 8px;
		border-left: 4px solid var(--color-primary);
	}

	.direction-card h3 {
		margin-bottom: 0.5rem;
		color: var(--color-primary);
		font-size: 1.1rem;
	}

	.direction-card p {
		margin: 0;
		line-height: 1.6;
	}

	.attractions-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: 1.5rem;
	}

	.attraction-card {
		background: white;
		border-radius: 8px;
		overflow: hidden;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		transition: transform 0.2s ease, box-shadow 0.2s ease;
	}

	.attraction-card:hover {
		transform: translateY(-2px);
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
	}

	.attraction-header {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 1rem;
		background: var(--color-light);
	}

	.attraction-icon {
		font-size: 1.5rem;
	}

	.attraction-header h3 {
		margin: 0;
		color: var(--color-primary);
		font-size: 1.1rem;
	}

	.attraction-description {
		padding: 0 1rem;
		margin: 0.5rem 0;
		color: var(--color-text);
		line-height: 1.6;
	}

	.attraction-distance {
		padding: 0 1rem;
		margin: 0.5rem 0;
		color: var(--color-text-light);
		font-size: 0.9rem;
		font-weight: 600;
	}

	.attraction-image {
		margin-top: 1rem;
	}

	.attraction-image img {
		width: 100%;
		height: 200px;
		object-fit: cover;
	}

	.parking-info,
	.accessibility-info {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: 1.5rem;
	}

	.parking-item,
	.accessibility-item {
		background: var(--color-light);
		padding: 1.5rem;
		border-radius: 8px;
		border-left: 4px solid var(--color-primary);
	}

	.parking-item h3,
	.accessibility-item h3 {
		margin-bottom: 0.5rem;
		color: var(--color-primary);
		font-size: 1.1rem;
	}

	.parking-item p,
	.accessibility-item p {
		margin: 0;
		line-height: 1.6;
	}

	@media (max-width: 768px) {
		.directions-grid,
		.attractions-grid {
			grid-template-columns: 1fr;
		}

		.parking-info,
		.accessibility-info {
			grid-template-columns: 1fr;
		}
	}
</style>

<!-- Leaflet CSS and JS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script>
	// Initialize Leaflet map for location page
	document.addEventListener('DOMContentLoaded', function() {
		const mapElement = document.getElementById('location-map');
		if (mapElement) {
			const lat = parseFloat(mapElement.dataset.lat);
			const lng = parseFloat(mapElement.dataset.lng);
			const initialZoom = parseInt(mapElement.dataset.zoom) || 15;
			const markerZoom = parseInt(mapElement.dataset.markerZoom) || 18;
			
			if (lat && lng && !isNaN(lat) && !isNaN(lng)) {
				// Initialize the map
				const map = L.map('location-map').setView([lat, lng], initialZoom);
				
				// Add OpenStreetMap tiles
				L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
					attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
				}).addTo(map);
				
				// Add a marker with click zoom functionality
				const marker = L.marker([lat, lng]).addTo(map);
				
				marker.bindPopup('Hotel Location').openPopup();
				
				// Add click event to zoom in when marker is clicked
				marker.on('click', function() {
					map.setView([lat, lng], markerZoom);
				});
			}
		}
	});
</script>
