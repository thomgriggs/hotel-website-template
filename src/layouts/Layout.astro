---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/main.css';
import { generateStructuredData } from '../lib/structuredData';

export interface Props {
	title: string;
	description?: string;
	image?: string;
	url?: string;
	type?: string;
	publishedTime?: string;
	modifiedTime?: string;
	author?: string;
	keywords?: string[];
	canonical?: string;
	noindex?: boolean;
}

const { 
	title, 
	description = "Experience luxury hospitality at Paradise Hotel. World-class accommodations, exceptional dining, and premium amenities in a stunning beachfront location.",
	image = "https://images.unsplash.com/photo-1566073771259-6a8506099945?w=1200&h=630&fit=crop&auto=format&q=80&fm=webp",
	url = Astro.url.href,
	type = "website",
	publishedTime,
	modifiedTime,
	author = "Paradise Hotel",
	keywords = ["luxury hotel", "beachfront resort", "fine dining", "spa", "accommodations"],
	canonical,
	noindex = false
} = Astro.props;

// Generate enhanced structured data
const structuredData = generateStructuredData({
	title,
	description,
	image,
	url,
	publishedTime,
	modifiedTime,
	author
}, type);
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		
		<!-- Primary SEO Meta Tags -->
		<title>{title}</title>
		<meta name="title" content={title} />
		<meta name="description" content={description} />
		<meta name="keywords" content={keywords.join(', ')} />
		<meta name="author" content={author} />
		
		<!-- Open Graph / Facebook -->
		<meta property="og:type" content={type} />
		<meta property="og:url" content={url} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={image} />
		<meta property="og:site_name" content="Paradise Hotel" />
		<meta property="og:locale" content="en_US" />
		
		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={url} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={image} />
		<meta property="twitter:site" content="@paradisehotel" />
		<meta property="twitter:creator" content="@paradisehotel" />
		
		<!-- Canonical URL -->
		<link rel="canonical" href={canonical || url} />
		
		<!-- Robots -->
		<meta name="robots" content={noindex ? "noindex, nofollow" : "index, follow"} />
		
		<!-- Theme & Icons -->
		<meta name="theme-color" content="#043345" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="apple-touch-icon" href="/apple-touch-icon.png" />
		
		<!-- PWA Manifest -->
		<link rel="manifest" href="/manifest.json" />
		
		<!-- Security Headers -->
		<meta http-equiv="X-Content-Type-Options" content="nosniff" />
		<meta http-equiv="X-Frame-Options" content="DENY" />
		<meta http-equiv="X-XSS-Protection" content="1; mode=block" />
		<meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin" />
		
		<!-- Performance Hints -->
		<meta http-equiv="Accept-CH" content="DPR, Viewport-Width, Width" />
		<link rel="dns-prefetch" href="//fonts.googleapis.com" />
		<link rel="dns-prefetch" href="//fonts.gstatic.com" />
		<link rel="dns-prefetch" href="//images.unsplash.com" />
		
		<!-- Structured Data -->
		<script type="application/ld+json" set:html={JSON.stringify(structuredData)}></script>
		
		<!-- Preload critical fonts -->
		<!-- Enhanced Font Loading - Performance Optimized -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		
		<!-- Preload critical fonts with font-display: swap -->
		<link rel="preload" href="https://fonts.googleapis.com/css2?family=Fraunces:ital,opsz,wght@0,9..144,400..700;1,9..144,400..700&family=Inter:wght@400;500;600&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
		<noscript><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Fraunces:ital,opsz,wght@0,9..144,400..700;1,9..144,400..700&family=Inter:wght@400;500;600&display=swap"></noscript>
		
		<!-- Material Symbols for icons - lazy loaded -->
		<link rel="preload" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
		<noscript><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&display=swap"></noscript>
		
		<title>{title}</title>
	</head>
	<body>
		<a href="#main" class="skiptocontent">Skip to main content</a>
		
		<Header />
		
		<main id="main" role="main">
			<slot />
		</main>
		
		<Footer />
		
		<script>
			// Enhanced Theme & Font System
			document.addEventListener('DOMContentLoaded', function() {
				const themeToggle = document.getElementById('theme-toggle');
				const themeIcon = themeToggle?.querySelector('.theme-icon');
				const themeSelect = document.getElementById('theme-select');
				const fontModeSelect = document.getElementById('font-mode-select');
				
				// Initialize color scheme from localStorage or system preference
				const savedColorScheme = localStorage.getItem('colorScheme');
				const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
				const initialColorScheme = savedColorScheme || (systemPrefersDark ? 'dark' : 'light');
				
				document.documentElement.style.colorScheme = initialColorScheme;
				if (themeIcon) {
					themeIcon.innerHTML = initialColorScheme === 'dark' ? 
						'<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"/><path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/></svg>' : 
						'<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/></svg>';
				}
				
				// Initialize theme preset from localStorage
				const savedTheme = localStorage.getItem('theme');
				const initialTheme = savedTheme || 'default';
				document.documentElement.setAttribute('data-theme', initialTheme);
				if (themeSelect) {
					themeSelect.value = initialTheme;
				}
				
				// Initialize font mode from localStorage
				const savedFontMode = localStorage.getItem('fontMode');
				const initialFontMode = savedFontMode || 'dual';
				document.documentElement.setAttribute('data-font-mode', initialFontMode);
				if (fontModeSelect) {
					fontModeSelect.value = initialFontMode;
				}
				
				// Color scheme toggle functionality
				themeToggle?.addEventListener('click', function() {
					const currentColorScheme = document.documentElement.style.colorScheme;
					const newColorScheme = currentColorScheme === 'dark' ? 'light' : 'dark';
					
					document.documentElement.style.colorScheme = newColorScheme;
					localStorage.setItem('colorScheme', newColorScheme);
					
					if (themeIcon) {
						themeIcon.innerHTML = newColorScheme === 'dark' ? 
							'<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"/><path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/></svg>' : 
							'<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/></svg>';
					}
				});
				
				// Theme preset switching functionality
				themeSelect?.addEventListener('change', function() {
					const selectedTheme = this.value;
					document.documentElement.setAttribute('data-theme', selectedTheme);
					localStorage.setItem('theme', selectedTheme);
				});
				
				// Font mode switching functionality
				fontModeSelect?.addEventListener('change', function() {
					const selectedFontMode = this.value;
					document.documentElement.setAttribute('data-font-mode', selectedFontMode);
					localStorage.setItem('fontMode', selectedFontMode);
				});
				
				// Performance optimization: Use system fonts for users on slow connections
				if (navigator.connection && navigator.connection.effectiveType === 'slow-2g') {
					document.documentElement.setAttribute('data-font-mode', 'performance');
					if (fontModeSelect) {
						fontModeSelect.value = 'performance';
					}
				}
			});

			// Mobile Menu with Dialog + Popover API
			document.addEventListener('DOMContentLoaded', function() {
				const menuBtn = document.querySelector('.menu-btn');
				const mobileMenu = document.querySelector('.mobile-menu');
				const closeBtn = document.querySelector('.mobile-menu-close');

				// Open menu when hamburger is clicked
				if (menuBtn && mobileMenu) {
					menuBtn.addEventListener('click', function() {
						mobileMenu.showModal();
						menuBtn.setAttribute('aria-expanded', 'true');
						menuBtn.setAttribute('aria-label', 'Close mobile menu');
						
						// Focus the first menu item
						const firstMenuItem = mobileMenu.querySelector('.menu a');
						if (firstMenuItem) {
							firstMenuItem.focus();
						}
					});
				}

				// Close menu when close button is clicked
				if (closeBtn && mobileMenu) {
					closeBtn.addEventListener('click', function() {
						mobileMenu.close();
						menuBtn.setAttribute('aria-expanded', 'false');
						menuBtn.setAttribute('aria-label', 'Open mobile menu');
						
						// Return focus to menu button
						menuBtn.focus();
					});
				}

				// Close menu when clicking backdrop
				if (mobileMenu) {
					mobileMenu.addEventListener('click', function(e) {
						if (e.target === mobileMenu) {
							mobileMenu.close();
							menuBtn.setAttribute('aria-expanded', 'false');
							menuBtn.setAttribute('aria-label', 'Open mobile menu');
							menuBtn.focus();
						}
					});
				}

				// Close menu when escape key is pressed
				document.addEventListener('keydown', function(e) {
					if (e.key === 'Escape') {
						// Close mobile menu if open
						if (mobileMenu && mobileMenu.open) {
							mobileMenu.close();
							menuBtn.setAttribute('aria-expanded', 'false');
							menuBtn.setAttribute('aria-label', 'Open mobile menu');
							menuBtn.focus();
						}
						
						// Close theme controls popover if open
						const themePopover = document.getElementById('theme-controls-popover');
						if (themePopover && themePopover.matches(':popover-open')) {
							themePopover.hidePopover();
						}
					}
				});

				// Focus trapping and arrow key navigation in the menu
				if (mobileMenu) {
					const menuItems = mobileMenu.querySelectorAll('.menu a');
					
					mobileMenu.addEventListener('keydown', function(e) {
						if (e.key === 'Tab') {
							const focusableElements = mobileMenu.querySelectorAll('a, button');
							const firstElement = focusableElements[0];
							const lastElement = focusableElements[focusableElements.length - 1];

							if (e.shiftKey) {
								// Shift + Tab
								if (document.activeElement === firstElement) {
									e.preventDefault();
									lastElement.focus();
								}
							} else {
								// Tab
								if (document.activeElement === lastElement) {
									e.preventDefault();
									firstElement.focus();
								}
							}
						} else if (menuItems.length > 0) {
							// Arrow key navigation for menu items
							const currentIndex = Array.from(menuItems).indexOf(document.activeElement);
							
							switch(e.key) {
								case 'ArrowDown':
									e.preventDefault();
									const nextIndex = (currentIndex + 1) % menuItems.length;
									menuItems[nextIndex].focus();
									break;
								case 'ArrowUp':
									e.preventDefault();
									const prevIndex = currentIndex <= 0 ? menuItems.length - 1 : currentIndex - 1;
									menuItems[prevIndex].focus();
									break;
								case 'Home':
									e.preventDefault();
									menuItems[0].focus();
									break;
								case 'End':
									e.preventDefault();
									menuItems[menuItems.length - 1].focus();
									break;
							}
						}
					});
				}
			});

			// Service Worker Registration
			if ('serviceWorker' in navigator) {
				window.addEventListener('load', function() {
					navigator.serviceWorker.register('/sw.js')
						.then(function(registration) {
							console.log('ServiceWorker registration successful with scope: ', registration.scope);
						})
						.catch(function(err) {
							console.log('ServiceWorker registration failed: ', err);
						});
				});
			}

			// Performance monitoring
			if ('performance' in window) {
				window.addEventListener('load', function() {
					setTimeout(function() {
						const perfData = performance.getEntriesByType('navigation')[0];
						console.log('Page Load Time:', perfData.loadEventEnd - perfData.loadEventStart, 'ms');
					}, 0);
				});
			}

	</script>

	<!-- Global Preview Mode -->
	<script>
		import('/src/lib/previewMode.ts').then(module => {
			module.initPreviewMode();
		});
	</script>
</body>
</html>
